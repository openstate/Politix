<?php
class SearchLexer_Tokens {
	const PAR_OPEN = 0;
	const PAR_CLOSE = 1;
	const NOT = 2;
	const BIN_OP = 3;
	const IDENT = 4;

	public static function getName($token) {
		switch($token) {
		case self::PAR_OPEN: return 'PAR_OPEN';
		case self::PAR_CLOSE: return 'PAR_CLOSE';
		case self::NOT: return 'NOT';
		case self::BIN_OP: return 'BIN_OP';
		case self::IDENT: return 'IDENT';
		}
	}
}

class SearchLexer {
	private $data;
	public $token;
	public $value;
	private $line;
	private $count;

	function __construct($data)
	{
		$this->data  = $data;
		$this->count = 0;
		$this->line  = 1;
	}

/*!lex2php
%input   $this->data
%counter $this->count
%token   $this->token
%value   $this->value
%line    $this->line
%matchlongest 1
whitespace = /[ \t\n]+/
par_open   = /\(/
par_close  = /\)/
not        = /-/
bin_op     = /(?:OF|EN|OR|AND)/
ident      = ![a-zA-Z0-9][a-zA-Z0-9-]*!
garbage    = /./
*/

/*!lex2php
whitespace {
	return false;
}
par_open {
	$this->token = SearchLexer_Tokens::PAR_OPEN;
}
par_close {
	$this->token = SearchLexer_Tokens::PAR_CLOSE;
}
not {
	$this->token = SearchLexer_Tokens::NOT;
}
bin_op {
	$this->token = SearchLexer_Tokens::BIN_OP;
}
ident {
	$this->token = SearchLexer_Tokens::IDENT;
}
garbage {
	return false;
}
*/
}